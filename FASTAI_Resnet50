# -*- coding: utf-8 -*-
"""AV_GOC_No_Flip_20_resnet50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PxbhlEZRyP90h5uDeKB5DFyeDjJJTuKz
"""

import pandas as pd
import string
import numpy as np
import nltk
import random
import chardet
import re
from sklearn.model_selection import train_test_split
from keras.layers import LSTM
from keras.preprocessing import sequence
from numpy import array
from keras.preprocessing.text import one_hot
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers.embeddings import Embedding
from keras.layers import Dropout
# fix random seed for reproducibility
np.random.seed(54621)

from fastai.imports import *
from fastai.vision import *
from fastai.metrics import error_rate

from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

tfms = get_transforms(flip_vert=False,do_flip=True, max_lighting=0.1, max_zoom=1.2, max_warp=0.2)

path = '/content/drive/My Drive/GOC'

test_images = ImageList.from_csv(path, 'test_level.csv', folder='test_image')

np.random.seed(42)
src = (ImageList.from_csv(path, 'train_level.csv', folder='train_image')
       .split_by_rand_pct(0.2)
       .label_from_df(label_delim=' ')
       .add_test(test_images))

data = (src.transform(tfms, size=210)
        .databunch(bs=16).normalize(imagenet_stats))

data.show_batch(rows=3, figsize=(12,9))

print(data.classes)
len(data.classes),data.c

acc_02 = partial(accuracy_thresh, thresh=0.2)
f_score = partial(fbeta, thresh=0.2)
learn = cnn_learner(data, models.resnet50, metrics=[acc_02, f_score])

learn.lr_find()
learn.recorder.plot()

lr = 0.01
learn.fit_one_cycle(20, slice(lr))

learn.save('stage-1-rn50')

learn.unfreeze()
learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(20,slice(1e-5, lr/5))

learn.save('stage-2-rn50')

data = (src.transform(tfms, size=128)
        .databunch(bs=16).normalize(imagenet_stats))

learn.data = data
data.train_ds[0][0].shape

learn.freeze()

learn.lr_find()
learn.recorder.plot()

lr=1e-6/2

learn.fit_one_cycle(20, slice(lr))

learn.save('stage-1-128-rn50')

learn.unfreeze()

learn.fit_one_cycle(20, slice(1e-7, lr/5))

learn.save('stage-2-128-rn50')

data = (src.transform(tfms, size=256)
        .databunch(bs=16).normalize(imagenet_stats))

learn.data = data
data.train_ds[0][0].shape

learn.freeze()

learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(20)

learn.save('stage-1-256-rn50')

learn.unfreeze()

learn.fit_one_cycle(20)

learn.save('stage-2-256-rn50')

probability, classification = learn.get_preds(ds_type=DatasetType.Test)
class_labels = np.argmax(probability, axis=1)

probability

learn = learn.load("stage-1-256-rn50")

probability1, classification1 = learn.get_preds(ds_type=DatasetType.Test)
class_labels1 = np.argmax(probability1, axis=1)

probability1

test_df = pd.read_csv('/content/drive/My Drive/GOC/test_level.csv')
test_df.head()

class_labels_dt=pd.DataFrame(class_labels)
class_labels_dt.columns=['category1']
class_labels_dt['category']=1+class_labels_dt['category1']

frames=[test_df,class_labels_dt]
result = pd.concat(frames,axis=1)

del result['category1']

result.to_csv('/content/drive/My Drive/GOC/result_no_flip_new_256_stage2.csv', index=False)

test_df = pd.read_csv('/content/drive/My Drive/GOC/test_level.csv')
test_df.head()

class_labels_dt1=pd.DataFrame(class_labels1)
class_labels_dt1.columns=['category1']
class_labels_dt1['category']=1+class_labels_dt1['category1']

frames=[test_df,class_labels_dt1]
result = pd.concat(frames,axis=1)

del result['category1']

result.to_csv('/content/drive/My Drive/GOC/result_no_flip_new_256_stage1.csv', index=False)

